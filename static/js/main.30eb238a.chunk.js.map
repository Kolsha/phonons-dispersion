{"version":3,"sources":["logic/calculate.js","logic/constants.js","ParamsPanel.js","AnimationPanel.js","App.js","serviceWorker.js","index.js"],"names":["qFactor","Math","pow","getBranchPoint","isOptic","q","params","m1_m2","m1","m2","c2m1m2","C","meanMass","secondPart","sqrt","cos","a","result","protonMass","scaleFactorC","ParamsPanel","state","handleInputChange","event","target","value","type","checked","parseFloat","name","_this","setState","Object","defineProperty","handleSetupClick","newParams","assign","constants","props","newParamsHandler","console","log","react_default","createElement","reactstrap_es","addonType","this","placeholder","min","max","step","onChange","color","onClick","PureComponent","AnimationPanel","isRunning","currentTime","axis","plot","layout","autosize","title","xaxis","range","yaxis","config","startLoop","stopLoop","_frameId","window","requestAnimationFrame","loop","bind","cancelAnimationFrame","x","y","marker","size","mode","amplitude","currWAcoustic","currQ","currWOptic","u1","u2","i","xW","xA","colorW","colorA","acousticWMax","abs","PI","opticalWMax","push","calculateAcousticAnimation","animationParams","_this2","react_plotly_default","style","width","data","getScatterData","onInitialized","figure","onUpdate","App","hovermode","branches","handleNewParams","handleBranchClick","points","length","setStateInterval","setInterval","floor","clearInterval","acoustic","optical","selected","brillouin_zone","qMax","qStep","wMax","calculateBranches","apply","dark","href","fluid","className","xs","offset","src_ParamsPanel","AnimationPanel_AnimationPanel","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.30eb238a.chunk.js","sourcesContent":["/* Phonons main calculation\n\n\n\n\n\n\n */\n\n\nconst qFactor = Math.pow(10.0, 8);\n\n\nfunction getBranchPoint(isOptic, q, params) {\n\n    const m1_m2 = (params.m1 * params.m2);\n\n\n    const c2m1m2 = 2.0 * params.C / m1_m2;\n\n    const meanMass = (params.m1 + params.m2) / 2.0;\n\n    const secondPart = Math.sqrt(\n        Math.pow(params.m1 - params.m2, 2.0) / 4.0 + m1_m2 * Math.pow(Math.cos(q * params.a), 2.0)\n    );\n\n\n    let result = meanMass;\n    result += (isOptic) ? secondPart : -secondPart;\n\n    result *= c2m1m2;\n\n\n    return Math.sqrt(result);\n\n}\n\n\nexport default function calculateBranches(params) {\n\n    /*\n            m1: 1.0,\n            m2: 2.0,\n            a: 1.0,\n            C: 1.0\n     */\n\n\n    let result = {\n        acoustic: {\n            x: [],\n            y: [],\n            marker: {\n                size: 8,\n                color: 'blue'\n            },\n            name: 'Acoustic',\n\n            mode: 'lines+markers'\n        },\n\n        optical: {\n            x: [],\n            y: [],\n            marker: {\n                size: 8,\n                color: 'red'\n            },\n            name: 'Optical',\n\n\n            mode: 'lines+markers'\n        },\n\n        selected: {\n            x: [],\n            y: [],\n            marker: {\n                size: 10,\n                color: 'black'\n            },\n\n            name: 'Current',\n\n            mode: 'markers'\n        },\n\n        brillouin_zone: {\n            x: [],\n            y: [],\n            marker: {\n                size: 3,\n                color: 'black'\n            },\n\n            name: 'Brillouin zone',\n\n            mode: 'markers',\n\n\n        }\n    };\n\n\n    const qMax = Math.PI / params.a;\n    const qStep = 0.001 / params.a;\n\n    let wMax = 0;\n\n    for (let q = 0.0; q <= qMax; q += qStep) {\n        const acoustic = getBranchPoint(false, q, params);\n        const optical = getBranchPoint(true, q, params);\n\n        result.acoustic.x.push(q * qFactor);\n        result.acoustic.y.push(acoustic);\n\n        result.optical.x.push(q * qFactor);\n        result.optical.y.push(optical);\n        //\n        // if(acoustic > wMax)\n        //     wMax = acoustic;\n\n        if (optical > wMax)\n            wMax = optical;\n\n\n    }\n\n    for (let q = qMax / 2; q <= qMax; q += qMax / 2) {\n        for (let y = 0; y < wMax; y += wMax / 20) {\n            result.brillouin_zone.x.push(q * qFactor);\n            result.brillouin_zone.y.push(y);\n        }\n    }\n\n\n    const acoustic = getBranchPoint(false, params.currQ / qFactor, params);\n    const optical = getBranchPoint(true, params.currQ / qFactor, params);\n\n    result.selected.x.push(params.currQ);\n    result.selected.y.push(acoustic);\n\n    result.selected.x.push(params.currQ);\n    result.selected.y.push(optical);\n\n\n    return result;\n\n}\n\n//params is animationParams\n\n\nexport function calculateAcousticAnimation(currentTime, axis, params) {\n\n\n    let result = {\n\n        x: [],\n        y: [],\n        marker: {\n            size: 28,\n            color: []\n        },\n        //name: 'Acoustic',\n\n        mode: 'markers'\n\n\n    };\n\n    const offset_x = 50;\n\n    const offset_y = 100;\n\n    const amplitude = 3 * Math.sqrt(offset_x);\n\n    //params.currQ = Math.PI / params.a / 2.0 * qFactor;\n\n    const currWAcoustic = getBranchPoint(false, params.currQ / qFactor, params);\n\n    const currWOptic = getBranchPoint(true, params.currQ / qFactor, params);\n\n\n    // console.log('Curq', params.currQ);\n    //\n    // console.log('Curw:', currW);\n    //\n    // console.log((params.currQ - Math.PI / (2.0 * params.a) * qFactor));\n\n    let u1 = 1.0, u2 = 1.0;\n    if (params.m1 > params.m2) {\n        u1 = (-params.m2 / params.m1);\n    }\n    else if (params.m1 < params.m2) {\n        u2 = (-params.m1 / params.m2);\n    }\n\n\n    for (let i = 1; i < 14; i++) {\n        let xW = 0, yW = 0,\n            xA = 0, yA = 0,\n            colorW = 'black', colorA = 'blue';\n\n\n        if (i % 2 === 1) {\n\n            colorW = 'black';\n            colorA = 'blue';\n\n            xA = (u1 * amplitude * Math.cos(2.0 * params.currQ * params.a * i - currWAcoustic * currentTime / params.acousticWMax) + offset_x * (i - 1));\n\n            if (Math.abs(params.currQ - Math.PI / (2.0 * params.a) * qFactor) < 0.2) {\n                xW = offset_x * (i - 1);\n            } else {\n                xW = (u1 * amplitude * Math.cos(2.0 * params.currQ * params.a * i - currWOptic * currentTime / params.opticalWMax) + offset_x * (i - 1));\n            }\n\n\n        } else {\n            colorW = 'yellow';\n            colorA = 'red';\n\n            xW = (u2 * amplitude * Math.cos(2.0 * params.currQ * params.a * i - currWOptic * currentTime / params.opticalWMax) + offset_x * (i - 1));\n\n\n            if (Math.abs(params.currQ - Math.PI / (2.0 * params.a) * qFactor) < 0.2) {\n                xA = offset_x * (i - 1);\n            } else {\n                xA = (u2 * amplitude * Math.cos(2.0 * params.currQ * params.a * i - currWAcoustic * currentTime / params.acousticWMax) + offset_x * (i - 1));\n            }\n\n\n        }\n\n        yW = offset_y;\n\n        yA = 3 * offset_y;\n\n        // [xW,yW] = [yW,xW];\n        //\n        // [xA,yA] = [yA,xA];\n\n\n        result.marker.color.push(colorW);\n        result.x.push(xW);\n        result.y.push(yW);\n\n        result.marker.color.push(colorA);\n        result.x.push(xA);\n        result.y.push(yA);\n\n\n        // if (i % 2 === 1) {\n        //     result.marker.color.push('black');\n        //\n        //     if (Math.abs(params.currQ - Math.PI / (2.0 * params.a)) >= 0.01) {\n        //         let x = 0, y = 0;\n        //         if (axis === 'x') {\n        //\n        //             x = (13.0 * Math.cos(2.0 * params.currQ * params.a * i - currW / params.acousticWMax * currentTime) + getWidth() / 10 * (i - 1));\n        //             y = offset;\n        //\n        //\n        //         } else {\n        //             x = 15 + getWidth() / 10 * (i - 1);\n        //             y = 13.0 * Math.cos(2.0 * params.currQ * params.a * i - currW / params.acousticWMax * currentTime) + offset;\n        //\n        //         }\n        //\n        //         result.x.push(x);\n        //         result.y.push(y);\n        //\n        //     }\n        //     else if (params.m1 !== params.m2) {\n        //         if (axis === 'x') {\n        //\n        //\n        //             result.x.push(getWidth() / 10 * (i - 1));\n        //             result.y.push(offset);\n        //\n        //         } else {\n        //\n        //\n        //             result.x.push(20 + getWidth() / 10 * (i - 1));\n        //             result.y.push(offset);\n        //         }\n        //\n        //     }\n        //     else if (axis === 'x') {\n        //\n        //\n        //         result.x.push((13.0 * Math.cos(2.0 * params.currQ * params.a * i - currW / params.acousticWMax * currentTime) + getWidth() / 10 * (i - 1)));\n        //         result.y.push(offset);\n        //\n        //\n        //     } else {\n        //\n        //         result.x.push(15 + getWidth() / 10 * (i - 1));\n        //         result.y.push((13.0 * Math.cos(2.0 * params.currQ * params.a * i - currW / params.acousticWMax * currentTime) + offset));\n        //     }\n        //\n        // }\n        // else {\n        //\n        //     result.marker.color.push('yellow');\n        //\n        //     let x = 0, y = 0;\n        //\n        //     if (axis === 'x') {\n        //         x = (13.0 * Math.cos(2.0 * params.currQ * params.a * i - currW / params.acousticWMax * currentTime) + getWidth() / 10 * (i - 1));\n        //         y = offset;\n        //         // g.fillOval((int), 40, 20, 20);\n        //     } else {\n        //         x = 15 + getWidth() / 10 * (i - 1);\n        //         y = (13.0 * Math.cos(2.0 * params.currQ * params.a * i - currW / params.acousticWMax * currentTime) + offset);\n        //\n        //     }\n        //\n        //     result.x.push(x);\n        //     result.y.push(y);\n        // }\n    }\n\n\n    return result;\n\n\n}\n\n// const res = calculateBranches({\n//     m1: 1.0,\n//     m2: 2.0,\n//     a: 1.0,\n//     C: 1.0\n// });\n//\n// console.log(res);","export const protonMass = 1.672621777E-24;\n\nexport const scaleFactorC = 1000.0;\n\nexport const deltaT = 0.1;","import React, {PureComponent} from 'react';\n\n\nimport {InputGroup, InputGroupAddon, InputGroupText, Input, Button} from 'reactstrap';\n\n\nimport * as constants from './logic/constants.js';\n\nclass ParamsPanel extends PureComponent {\n\n\n    state = {\n\n        m1: 1.0,\n        m2: 2.0,\n        a: 1.0,\n        C: 1.0,\n    };\n    handleInputChange = event => {\n        //this.props.textChange(event);\n        //console.log(event);\n\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : (parseFloat(target.value) || 0);\n        const name = target.name;\n\n\n        this.setState({\n            [name]: value\n        });\n        //console.log(this.params);\n    };\n\n    handleSetupClick = () => {\n\n        let newParams = Object.assign({}, this.state);\n        newParams.m1 *= constants.protonMass;\n        newParams.m2 *= constants.protonMass;\n\n        this.props.newParamsHandler(newParams);\n        //alert(this.params);\n        //console.log(this.state);\n    };\n\n\n    componentDidUpdate() {\n        console.log('ParamsPanel componentDidUpdate()');\n\n    }\n\n\n    render() {\n        return (\n            <div>\n\n                <h1>Params:</h1>\n                <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">m1</InputGroupAddon>\n                    <Input name={\"m1\"} value={this.state.m1}\n                           placeholder=\"Mass of 1st\"\n                           type=\"number\"\n                           min=\"0.0\" max=\"100.0\" step=\"0.1\"\n                           onChange={this.handleInputChange}/>\n                    <InputGroupAddon addonType=\"append\"> * Mp</InputGroupAddon>\n                </InputGroup>\n\n                <br/>\n\n                <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">m2</InputGroupAddon>\n                    <Input name={\"m2\"} value={this.state.m2}\n                           placeholder=\"Mass of 2d\"\n                           type=\"number\"\n                           min=\"0.0\" max=\"100.0\" step=\"0.1\"\n                           onChange={this.handleInputChange}/>\n                    <InputGroupAddon addonType=\"append\"> * Mp</InputGroupAddon>\n                </InputGroup>\n\n                <br/>\n                <br/>\n\n                <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">a</InputGroupAddon>\n                    <Input name={\"a\"} value={this.state.a}\n                           placeholder=\"\"\n                           type=\"number\"\n                           min=\"0.0\" max=\"100.0\" step=\"0.1\"\n                           onChange={this.handleInputChange}/>\n                    <InputGroupAddon addonType=\"append\">cm^(-8)</InputGroupAddon>\n                </InputGroup>\n\n                <br/>\n                <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">C</InputGroupAddon>\n                    <Input name={\"C\"} value={this.state.C}\n                           placeholder=\"\"\n                           type=\"number\"\n                           min=\"0.0\" max=\"100.0\" step=\"0.1\"\n                           onChange={this.handleInputChange}/>\n                    <InputGroupAddon addonType=\"append\">10^3 erg / cm^2</InputGroupAddon>\n                </InputGroup>\n\n\n                <br/>\n\n\n\n                <br/>\n\n                <InputGroup>\n\n                    <Button color=\"success\" onClick={this.handleSetupClick}>Setup</Button>\n                </InputGroup>\n\n\n            </div>);\n    }\n\n}\n\n\nexport default ParamsPanel;","import React, {Component, PureComponent} from 'react';\n\n\nimport Plot from 'react-plotly.js';\n\nimport * as constants from './logic/constants.js';\n\nimport {calculateAcousticAnimation} from './logic/calculate.js';\n\n\nexport default class AnimationPanel extends PureComponent {\n\n    state = {\n\n        isRunning: !false,\n        currentTime: 0.0,\n        //mode: 'optical',\n        axis: 'x',\n    };\n\n    plot = {\n        layout: {\n            autosize: true, title: 'Animation',\n            xaxis: {range: [-20, 280]},\n            yaxis: {range: [0, 480]}\n        },\n        config: {}\n    };\n\n    componentDidUpdate() {\n        //console.log('anim componentDidUpdate()');\n\n\n    }\n\n    componentDidMount() {\n        // this.setStateInterval = window.setInterval(() => {\n        //     if (!this.state.isRunning)\n        //         return;\n        //     this.setState({\n        //         currentTime: (this.state.currentTime + constants.deltaT)\n        //     });\n        // }, Math.floor(constants.deltaT * 500));\n        //\n        // console.log('mount anim');\n        this.startLoop();\n    }\n\n    componentWillUnmount() {\n        // window.clearInterval(this.setStateInterval);\n        this.stopLoop();\n    }\n\n    startLoop() {\n        if (!this._frameId) {\n            this._frameId = window.requestAnimationFrame(this.loop.bind(this));\n        }\n    }\n\n    loop() {\n        this._frameId = window.requestAnimationFrame(this.loop.bind(this));\n\n\n        if (!this.state.isRunning)\n            return;\n        this.setState({\n            currentTime: (this.state.currentTime + constants.deltaT)\n        });\n\n\n    }\n\n    stopLoop() {\n        window.cancelAnimationFrame(this._frameId);\n        // Note: no need to worry if the loop has already been cancelled\n        // cancelAnimationFrame() won't throw an error\n    }\n\n\n    getScatterData() {\n        // return range(1).map((index) => {\n        //     return {\n        //         x: [Math.sin(this.state.currentTime * Math.PI)],\n        //         y: [Math.cos(this.state.currentTime * Math.PI)],\n        //         marker: {\n        //             size: 14,\n        //             color: ['red', 'blue']\n        //         },\n        //         //ids: this.state.ids,\n        //         mode: 'markers'\n        //     };\n        //\n        //\n        // });\n\n        return [calculateAcousticAnimation(this.state.currentTime, this.state.axis, this.props.animationParams)];\n    }\n\n\n    render() {\n\n        //console.log(this.props.animationParams);\n\n        return (\n\n            <Plot style={{width: '100%'}}\n\n                  data={this.getScatterData()}\n                  layout={this.plot.layout}\n\n                  config={this.plot.config}\n\n                  onInitialized={(figure) => {\n                      this.plot.layout = figure.layout;\n                      this.plot.config = figure.config\n                  }}\n                  onUpdate={(figure) => {\n                      this.plot.layout = figure.layout;\n                      this.plot.config = figure.config\n                  }}\n\n            />\n\n        )\n    }\n\n}","import React, {Component} from 'react';\n\n\nimport Plot from 'react-plotly.js';\n\nimport {Container, Row, Col} from 'reactstrap';\n\nimport calculateBranches from './logic/calculate.js';\n\nimport * as constants from './logic/constants.js';\n\nimport {\n    Navbar,\n    NavbarBrand,\n    Jumbotron,\n    NavLink\n} from 'reactstrap';\n\nimport ParamsPanel from './ParamsPanel.js';\nimport AnimationPanel from './AnimationPanel.js';\n\n\nfunction shuffleInPlace(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        let temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\n\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n\nfunction range(size, startAt = 0) {\n    return [...Array(size).keys()].map(i => i + startAt);\n}\n\nclass App extends Component {\n\n    state = {\n        //currentTime: 0.0\n\n        params: {\n            m1: 1.0 * constants.protonMass,\n            m2: 2.0 * constants.protonMass,\n            a: 1.0,\n            C: 1.0 * constants.scaleFactorC,\n            currQ: 157079632.67948964\n        }\n    };\n\n\n    plot = {\n        layout: {\n            title: 'Dispersion of phonons',\n            hovermode: 'closest'\n        },\n        config: {}\n    };\n\n\n    branches = null;\n\n\n    componentDidMount() {\n        this.setStateInterval = window.setInterval(() => {\n            // this.setState({\n            //     currentTime: (this.state.currentTime + deltaT)\n            // });\n        }, Math.floor(constants.deltaT * 900));\n\n        // if(this.branches == null){\n        //     this.branches = calculateBranches(this.state.params);\n        // }\n    }\n\n    componentWillUnmount() {\n        window.clearInterval(this.setStateInterval);\n    }\n\n    getScatterData() {\n        return [this.branches.acoustic, this.branches.optical, this.branches.selected, this.branches.brillouin_zone];\n    }\n\n    handleNewParams = newParams => {\n        console.log(newParams);\n\n        newParams.currQ = this.state.params.currQ;\n\n        this.setState({\n            params: newParams\n        });\n    };\n\n    handleBranchClick = data => {\n        //console.log(event);\n        console.log('click', data);\n\n        if (!data.points.length)\n            return;\n\n        let newParams = Object.assign({}, this.state.params);\n\n        newParams.currQ = data.points[0].x;\n\n\n        this.setState({\n            params: newParams\n        });\n    };\n\n    render() {\n\n        // console.log('render');\n        // console.log(this.state.scatterData);\n\n\n        this.branches = calculateBranches(this.state.params);\n\n        let animationParams = Object.assign({}, this.state.params);\n\n        animationParams.opticalWMax = Math.max.apply(null, this.branches.optical.y);\n        animationParams.acousticWMax = Math.max.apply(null, this.branches.acoustic.y);\n\n        return (\n\n            <div>\n                <Navbar color=\"dark\" dark>\n                    <NavbarBrand href={\"#\"}>Phonons</NavbarBrand>\n\n\n                    <NavLink href=\"#\">Github</NavLink>\n                </Navbar>\n\n\n                <Jumbotron fluid={true}>\n                    <Container fluid={true} className={\"h-25\"}>\n\n                        <Row>\n                            <Col xs=\"8\">\n                                <Plot style={{width: '100%'}}\n                                      data={this.getScatterData()}\n                                      onClick={this.handleBranchClick}\n\n                                      layout={this.plot.layout}\n\n                                      config={this.plot.config}\n\n                                      onInitialized={(figure) => {\n                                          this.plot.layout = figure.layout;\n                                          this.plot.config = figure.config\n                                      }}\n                                      onUpdate={(figure) => {\n                                          this.plot.layout = figure.layout;\n                                          this.plot.config = figure.config\n                                      }}\n                                />\n                            </Col>\n\n                            <Col xs={{size: 4, offset: 0}}>\n\n                                <ParamsPanel newParamsHandler={this.handleNewParams}/>\n\n                            </Col>\n                        </Row>\n\n\n                        <br/>\n                        <Row>\n                            <Col xs=\"12\">\n                                <AnimationPanel animationParams={animationParams}/>\n                            </Col>\n\n                        </Row>\n\n\n                    </Container>\n                </Jumbotron>\n\n\n                <footer className=\"footer font-small blue\">\n\n\n                    <div className=\"footer-copyright text-center py-3\">© 2018 Copyright:\n                        <a href=\"https://kolsha.ru\"> Kolsha</a>\n                    </div>\n\n\n                </footer>\n            </div>\n\n\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}