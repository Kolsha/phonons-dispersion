{"version":3,"sources":["logic/calculate.js","logic/constants.js","ParamsPanel.js","App.js","serviceWorker.js","index.js"],"names":["getBranchPoint","isOptic","q","params","m1_m2","m1","m2","c2m1m2","C","meanMass","secondPart","Math","sqrt","pow","cos","a","result","protonMass","scaleFactorC","ParamsPanel","state","currQ","handleInputChange","event","target","value","type","checked","parseFloat","name","_this","setState","Object","defineProperty","handleSetupClick","newParams","assign","constants","props","newParamsHandler","console","log","react_default","createElement","reactstrap_es","addonType","this","placeholder","min","max","step","onChange","maxQ","color","onClick","PureComponent","App","branches","handleNewParams","handleBranchClick","data","setStateInterval","window","setInterval","floor","deltaT","clearInterval","acoustic","optical","selected","qFactor","x","y","marker","size","mode","qMax","PI","qStep","push","calculateBranches","dark","href","fluid","className","xs","react_plotly_default","style","width","getScatterData","layout","title","hovermode","offset","src_ParamsPanel","length","autosize","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9d033d55.chunk.js","sourcesContent":["/* Phonons main calculation\n\n\n\n\n\n\n */\n\nfunction getBranchPoint(isOptic, q, params) {\n\n    const m1_m2 = (params.m1 * params.m2);\n\n\n    const c2m1m2 = 2.0 * params.C / m1_m2;\n\n    const meanMass = (params.m1 + params.m2) / 2.0;\n\n    const secondPart = Math.sqrt(\n        Math.pow(params.m1 - params.m2, 2.0) / 4.0 + m1_m2 * Math.pow(Math.cos(q * params.a), 2.0)\n    );\n\n\n    let result = meanMass;\n    result += (isOptic) ? secondPart : -secondPart;\n\n    result *= c2m1m2;\n\n\n    return Math.sqrt(result);\n\n}\n\n\nexport default function calculateBranches(params) {\n\n    /*\n            m1: 1.0,\n            m2: 2.0,\n            a: 1.0,\n            C: 1.0\n     */\n\n\n    const qFactor = Math.pow(10.0, 8);\n\n    let result = {\n        acoustic: {\n            x: [],\n            y: [],\n            marker: {\n                size: 8,\n                color: 'blue'\n            },\n            name: 'Acoustic',\n\n            mode: 'lines+markers'\n        },\n\n        optical: {\n            x: [],\n            y: [],\n            marker: {\n                size: 8,\n                color: 'red'\n            },\n            name: 'Optical',\n\n\n            mode: 'lines+markers'\n        },\n\n        selected: {\n            x: [],\n            y: [],\n            marker: {\n                size: 10,\n                color: ['black']\n            },\n\n            name: 'Current',\n\n            mode: 'markers'\n        },\n    };\n\n\n    const qMax = Math.PI / params.a;\n    const qStep = 0.01 / params.a;\n\n    for (let q = 0.0; q <= qMax; q += qStep) {\n        const acoustic = getBranchPoint(false, q, params);\n        const optical = getBranchPoint(true, q, params);\n\n        result.acoustic.x.push(q * qFactor);\n        result.acoustic.y.push(acoustic);\n\n        result.optical.x.push(q * qFactor);\n        result.optical.y.push(optical);\n\n\n    }\n\n\n    const acoustic = getBranchPoint(false, params.currQ / qFactor, params);\n    const optical = getBranchPoint(true, params.currQ / qFactor, params);\n\n    result.selected.x.push(params.currQ);\n    result.selected.y.push(acoustic);\n\n    result.selected.x.push(params.currQ);\n    result.selected.y.push(optical);\n\n\n    return result;\n\n\n}\n//\n// const res = calculateBranches({\n//     m1: 1.0,\n//     m2: 2.0,\n//     a: 1.0,\n//     C: 1.0\n// });\n//\n// console.log(res);","export const protonMass = 1.672621777E-24;\n\nexport const scaleFactorC = 1000.0;","import React, {PureComponent} from 'react';\n\n\nimport {InputGroup, InputGroupAddon, InputGroupText, Input, Button} from 'reactstrap';\n\n\nimport * as constants from './logic/constants.js';\n\nclass ParamsPanel extends PureComponent {\n\n\n    state = {\n\n        m1: 1.0,\n        m2: 2.0,\n        a: 1.0,\n        C: 1.0,\n        currQ: 0.0\n\n    };\n    handleInputChange = event => {\n        //this.props.textChange(event);\n        //console.log(event);\n\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : (parseFloat(target.value) || 0);\n        const name = target.name;\n\n\n        this.setState({\n            [name]: value\n        });\n        //console.log(this.params);\n    };\n\n    handleSetupClick = () => {\n\n        let newParams = Object.assign({}, this.state);\n        newParams.m1 *= constants.protonMass;\n        newParams.m2 *= constants.protonMass;\n        newParams.C *= constants.scaleFactorC;\n\n        this.props.newParamsHandler(newParams);\n        //alert(this.params);\n        //console.log(this.state);\n    };\n\n\n    componentDidUpdate() {\n        console.log('ParamsPanel componentDidUpdate()');\n\n    }\n\n\n    render() {\n        return (\n            <div>\n\n                <h1>Params:</h1>\n                <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">m1</InputGroupAddon>\n                    <Input name={\"m1\"} value={this.state.m1}\n                           placeholder=\"Mass of 1st\"\n                           type=\"number\"\n                           min=\"0.0\" max=\"100.0\" step=\"0.1\"\n                           onChange={this.handleInputChange}/>\n                    <InputGroupAddon addonType=\"append\"> * Mp</InputGroupAddon>\n                </InputGroup>\n\n                <br/>\n\n                <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">m2</InputGroupAddon>\n                    <Input name={\"m2\"} value={this.state.m2}\n                           placeholder=\"Mass of 2d\"\n                           type=\"number\"\n                           min=\"0.0\" max=\"100.0\" step=\"0.1\"\n                           onChange={this.handleInputChange}/>\n                    <InputGroupAddon addonType=\"append\"> * Mp</InputGroupAddon>\n                </InputGroup>\n\n                <br/>\n                <br/>\n\n                <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">a</InputGroupAddon>\n                    <Input name={\"a\"} value={this.state.a}\n                           placeholder=\"\"\n                           type=\"number\"\n                           min=\"0.0\" max=\"100.0\" step=\"0.1\"\n                           onChange={this.handleInputChange}/>\n                    <InputGroupAddon addonType=\"append\">cm^(-8)</InputGroupAddon>\n                </InputGroup>\n\n                <br/>\n                <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">C</InputGroupAddon>\n                    <Input name={\"C\"} value={this.state.C}\n                           placeholder=\"\"\n                           type=\"number\"\n                           min=\"0.0\" max=\"100.0\" step=\"0.1\"\n                           onChange={this.handleInputChange}/>\n                    <InputGroupAddon addonType=\"append\">10^3 erg / cm^2</InputGroupAddon>\n                </InputGroup>\n\n\n                <br/>\n                <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">Current Q</InputGroupAddon>\n                    <Input name={\"currQ\"} value={this.state.currQ}\n                           placeholder=\"\"\n                           type=\"range\"\n                           min=\"0.0\" max={this.props.maxQ} step=\"0.1\"\n                           onChange={this.handleInputChange}/>\n                    <InputGroupAddon addonType=\"append\">  {this.state.currQ} cm^(-1)</InputGroupAddon>\n                </InputGroup>\n\n\n                <br/>\n\n                <InputGroup>\n\n                    <Button color=\"success\" onClick={this.handleSetupClick}>Setup</Button>\n                </InputGroup>\n\n\n            </div>);\n    }\n\n}\n\n\nexport default ParamsPanel;","import React, {Component} from 'react';\n\n\nimport Plot from 'react-plotly.js';\n\nimport {Container, Row, Col} from 'reactstrap';\n\nimport calculateBranches from './logic/calculate.js';\n\nimport * as constants from './logic/constants.js';\n\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Jumbotron,\n    InputGroup, InputGroupAddon, InputGroupText, Input,\n    Nav,\n    NavItem,\n    NavLink,\n    UncontrolledDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n\n} from 'reactstrap';\n\nimport ParamsPanel from './ParamsPanel.js';\n\n\nconst deltaT = 0.01;\n\n\nfunction shuffleInPlace(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        let temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\n\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n\nfunction range(size, startAt = 0) {\n    return [...Array(size).keys()].map(i => i + startAt);\n}\n\nclass App extends Component {\n\n    state = {\n        //currentTime: 0.0\n\n        params: {\n            m1: 1.1 * constants.protonMass,\n            m2: 2.0 * constants.protonMass,\n            a: 1.0,\n            C: 1.1 * constants.scaleFactorC,\n            currQ: 0.0\n        }\n    };\n\n\n    branches = null;\n\n\n    componentDidMount() {\n        this.setStateInterval = window.setInterval(() => {\n            // this.setState({\n            //     currentTime: (this.state.currentTime + deltaT)\n            // });\n        }, Math.floor(deltaT * 900));\n\n        // if(this.branches == null){\n        //     this.branches = calculateBranches(this.state.params);\n        // }\n    }\n\n    componentWillUnmount() {\n        window.clearInterval(this.setStateInterval);\n    }\n\n    getScatterData() {\n        // return range(1).map((index) => {\n        //     return {\n        //         x: [Math.sin(this.state.currentTime * Math.PI)],\n        //         y: [Math.cos(this.state.currentTime * Math.PI)],\n        //         marker: {\n        //             size: 14,\n        //             color: ['red', 'blue']\n        //         },\n        //         //ids: this.state.ids,\n        //         mode: 'markers'\n        //     };\n        //\n        //\n        // });\n\n        return [this.branches.acoustic, this.branches.optical, this.branches.selected];\n    }\n\n    handleNewParams = newParams => {\n        console.log(newParams);\n\n        this.setState({\n            params: newParams\n        });\n    }\n\n    handleBranchClick = data => {\n        //console.log(event);\n        console.log('click', data);\n    }\n\n    render() {\n\n        // console.log('render');\n        // console.log(this.state.scatterData);\n\n        this.branches = calculateBranches(this.state.params);\n        return (\n\n            <div>\n                <Navbar color=\"dark\" dark>\n                    <NavbarBrand href={\"#\"}>Phonons</NavbarBrand>\n\n\n                    <NavLink href=\"#\">Github</NavLink>\n                </Navbar>\n\n\n                <Jumbotron fluid={true}>\n                    <Container fluid={true} className={\"h-25\"}>\n\n                        <Row>\n                            <Col xs=\"8\">\n                                <Plot style={{width: '100%'}}\n                                      data={this.getScatterData()}\n                                      onClick={this.handleBranchClick}\n                                      layout={{title: 'Dispersion of phonons', hovermode: 'closest'}}\n                                />\n                            </Col>\n\n                            <Col xs={{size: 4, offset: 0}}>\n\n                                <ParamsPanel newParamsHandler={this.handleNewParams}\n                                             maxQ={this.branches.acoustic.x[this.branches.acoustic.x.length - 1]}/>\n\n                            </Col>\n                        </Row>\n\n\n                        <br/>\n                        <Row>\n                            <Col xs=\"12\">\n                                <Plot style={{width: '100%'}}\n\n                                      data={this.getScatterData()}\n                                      layout={{autosize: true, title: 'A Fancy Plot'}}\n                                />\n                            </Col>\n\n                        </Row>\n\n\n                    </Container>\n                </Jumbotron>\n\n\n                <footer className=\"footer font-small blue\">\n\n\n                    <div className=\"footer-copyright text-center py-3\">© 2018 Copyright:\n                        <a href=\"https://kolsha.ru\"> Kolsha</a>\n                    </div>\n\n\n                </footer>\n            </div>\n\n\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}