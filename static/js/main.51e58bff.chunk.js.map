{"version":3,"sources":["logic/calculate.js","logic/constants.js","ParamsPanel.js","AnimationPanel.js","App.js","serviceWorker.js","index.js"],"names":["qFactor","Math","pow","getBranchPoint","isOptic","q","params","m1_m2","m1","m2","c2m1m2","C","meanMass","secondPart","sqrt","cos","a","result","offset","offset_y","protonMass","scaleFactorC","ParamsPanel","state","handleInputChange","event","target","value","type","checked","parseFloat","name","_this","setState","Object","defineProperty","handleSetupClick","newParams","assign","constants","props","newParamsHandler","console","log","react_default","createElement","reactstrap_es","addonType","this","placeholder","min","max","step","onChange","color","onClick","PureComponent","AnimationPanel","isRunning","currentTime","axis","_this2","setStateInterval","window","setInterval","floor","clearInterval","x","y","marker","size","mode","currWAcoustic","currQ","currWOptic","u1","u2","i","yW","yA","xW","xA","colorW","colorA","acousticWMax","abs","PI","opticalWMax","push","calculateAcousticAnimation","animationParams","react_plotly_default","style","width","data","getScatterData","layout","autosize","title","xaxis","range","yaxis","App","branches","handleNewParams","handleBranchClick","points","length","acoustic","optical","selected","qMax","qStep","calculateBranches","apply","dark","href","fluid","className","xs","hovermode","src_ParamsPanel","maxQ","AnimationPanel_AnimationPanel","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.51e58bff.chunk.js","sourcesContent":["/* Phonons main calculation\n\n\n\n\n\n\n */\n\n\nconst qFactor = Math.pow(10.0, 8);\n\n\nfunction getBranchPoint(isOptic, q, params) {\n\n    const m1_m2 = (params.m1 * params.m2);\n\n\n    const c2m1m2 = 2.0 * params.C / m1_m2;\n\n    const meanMass = (params.m1 + params.m2) / 2.0;\n\n    const secondPart = Math.sqrt(\n        Math.pow(params.m1 - params.m2, 2.0) / 4.0 + m1_m2 * Math.pow(Math.cos(q * params.a), 2.0)\n    );\n\n\n    let result = meanMass;\n    result += (isOptic) ? secondPart : -secondPart;\n\n    result *= c2m1m2;\n\n\n    return Math.sqrt(result);\n\n}\n\n\nexport default function calculateBranches(params) {\n\n    /*\n            m1: 1.0,\n            m2: 2.0,\n            a: 1.0,\n            C: 1.0\n     */\n\n\n    let result = {\n        acoustic: {\n            x: [],\n            y: [],\n            marker: {\n                size: 8,\n                color: 'blue'\n            },\n            name: 'Acoustic',\n\n            mode: 'lines+markers'\n        },\n\n        optical: {\n            x: [],\n            y: [],\n            marker: {\n                size: 8,\n                color: 'red'\n            },\n            name: 'Optical',\n\n\n            mode: 'lines+markers'\n        },\n\n        selected: {\n            x: [],\n            y: [],\n            marker: {\n                size: 10,\n                color: ['black']\n            },\n\n            name: 'Current',\n\n            mode: 'markers'\n        },\n    };\n\n\n    const qMax = Math.PI / params.a;\n    const qStep = 0.001 / params.a;\n\n    for (let q = 0.0; q <= qMax; q += qStep) {\n        const acoustic = getBranchPoint(false, q, params);\n        const optical = getBranchPoint(true, q, params);\n\n        result.acoustic.x.push(q * qFactor);\n        result.acoustic.y.push(acoustic);\n\n        result.optical.x.push(q * qFactor);\n        result.optical.y.push(optical);\n\n\n    }\n\n\n    const acoustic = getBranchPoint(false, params.currQ / qFactor, params);\n    const optical = getBranchPoint(true, params.currQ / qFactor, params);\n\n    result.selected.x.push(params.currQ);\n    result.selected.y.push(acoustic);\n\n    result.selected.x.push(params.currQ);\n    result.selected.y.push(optical);\n\n\n    return result;\n\n}\n\n//params is animationParams\n\n\nconst offset = 20;\n\nconst offset_y = 70;\n\nfunction getWidth() {\n    return offset;\n}\n\nexport function calculateAcousticAnimation(currentTime, axis, params) {\n\n\n    let result = {\n\n        x: [],\n        y: [],\n        marker: {\n            size: 28,\n            color: []\n        },\n        //name: 'Acoustic',\n\n        mode: 'markers'\n\n\n    };\n\n    //params.currQ = Math.PI / params.a / 2.0 * qFactor;\n\n    const currWAcoustic = getBranchPoint(false, params.currQ / qFactor, params);\n\n    const currWOptic = getBranchPoint(true, params.currQ / qFactor, params);\n\n\n    // console.log('Curq', params.currQ);\n    //\n    // console.log('Curw:', currW);\n    //\n    // console.log((params.currQ - Math.PI / (2.0 * params.a) * qFactor));\n\n    let u1 = 1.0, u2 = 1.0;\n    if (params.m1 > params.m2) {\n        u1 = (-params.m2 / params.m1);\n    }\n    else if (params.m1 < params.m2) {\n        u2 = (-params.m1 / params.m2);\n    }\n\n\n    for (let i = 1; i < 14; i++) {\n        let xW = 0, yW = 0,\n            xA = 0, yA = 0,\n            colorW= 'black', colorA = 'blue';\n\n\n        if (i % 2 === 1) {\n\n            colorW = 'black';\n            colorA = 'blue';\n\n            xA = (u1 * 10.0 * Math.cos(2.0 * params.currQ * params.a * i - currWAcoustic * currentTime / params.acousticWMax) + offset * (i - 1));\n\n            if (Math.abs(params.currQ - Math.PI / (2.0 * params.a) * qFactor) < 0.2) {\n                xW = offset * (i - 1);\n            } else {\n                xW = (u1 * 10.0 * Math.cos(2.0 * params.currQ * params.a * i - currWOptic * currentTime / params.opticalWMax) + offset * (i - 1));\n            }\n\n\n        } else {\n            colorW = 'yellow';\n            colorA = 'red';\n\n            xW = (u2 * 10.0 * Math.cos(2.0 * params.currQ * params.a * i - currWOptic * currentTime / params.opticalWMax) + offset * (i - 1));\n\n\n            if (Math.abs(params.currQ - Math.PI / (2.0 * params.a) * qFactor) < 0.2) {\n                xA = offset * (i - 1);\n            } else {\n                xA = (u2 * 10.0 * Math.cos(2.0 * params.currQ * params.a * i - currWAcoustic * currentTime / params.acousticWMax) + offset * (i - 1));\n            }\n\n\n        }\n\n        yW = offset_y;\n\n        yA = 3 * offset_y;\n\n        // [xW,yW] = [yW,xW];\n        //\n        // [xA,yA] = [yA,xA];\n\n\n        result.marker.color.push(colorW);\n        result.x.push(xW);\n        result.y.push(yW);\n\n        result.marker.color.push(colorA);\n        result.x.push(xA);\n        result.y.push(yA);\n\n\n        // if (i % 2 === 1) {\n        //     result.marker.color.push('black');\n        //\n        //     if (Math.abs(params.currQ - Math.PI / (2.0 * params.a)) >= 0.01) {\n        //         let x = 0, y = 0;\n        //         if (axis === 'x') {\n        //\n        //             x = (13.0 * Math.cos(2.0 * params.currQ * params.a * i - currW / params.acousticWMax * currentTime) + getWidth() / 10 * (i - 1));\n        //             y = offset;\n        //\n        //\n        //         } else {\n        //             x = 15 + getWidth() / 10 * (i - 1);\n        //             y = 13.0 * Math.cos(2.0 * params.currQ * params.a * i - currW / params.acousticWMax * currentTime) + offset;\n        //\n        //         }\n        //\n        //         result.x.push(x);\n        //         result.y.push(y);\n        //\n        //     }\n        //     else if (params.m1 !== params.m2) {\n        //         if (axis === 'x') {\n        //\n        //\n        //             result.x.push(getWidth() / 10 * (i - 1));\n        //             result.y.push(offset);\n        //\n        //         } else {\n        //\n        //\n        //             result.x.push(20 + getWidth() / 10 * (i - 1));\n        //             result.y.push(offset);\n        //         }\n        //\n        //     }\n        //     else if (axis === 'x') {\n        //\n        //\n        //         result.x.push((13.0 * Math.cos(2.0 * params.currQ * params.a * i - currW / params.acousticWMax * currentTime) + getWidth() / 10 * (i - 1)));\n        //         result.y.push(offset);\n        //\n        //\n        //     } else {\n        //\n        //         result.x.push(15 + getWidth() / 10 * (i - 1));\n        //         result.y.push((13.0 * Math.cos(2.0 * params.currQ * params.a * i - currW / params.acousticWMax * currentTime) + offset));\n        //     }\n        //\n        // }\n        // else {\n        //\n        //     result.marker.color.push('yellow');\n        //\n        //     let x = 0, y = 0;\n        //\n        //     if (axis === 'x') {\n        //         x = (13.0 * Math.cos(2.0 * params.currQ * params.a * i - currW / params.acousticWMax * currentTime) + getWidth() / 10 * (i - 1));\n        //         y = offset;\n        //         // g.fillOval((int), 40, 20, 20);\n        //     } else {\n        //         x = 15 + getWidth() / 10 * (i - 1);\n        //         y = (13.0 * Math.cos(2.0 * params.currQ * params.a * i - currW / params.acousticWMax * currentTime) + offset);\n        //\n        //     }\n        //\n        //     result.x.push(x);\n        //     result.y.push(y);\n        // }\n    }\n\n\n    return result;\n\n\n}\n\n// const res = calculateBranches({\n//     m1: 1.0,\n//     m2: 2.0,\n//     a: 1.0,\n//     C: 1.0\n// });\n//\n// console.log(res);","export const protonMass = 1.672621777E-24;\n\nexport const scaleFactorC = 1000.0;\n\nexport const deltaT = 0.1;","import React, {PureComponent} from 'react';\n\n\nimport {InputGroup, InputGroupAddon, InputGroupText, Input, Button} from 'reactstrap';\n\n\nimport * as constants from './logic/constants.js';\n\nclass ParamsPanel extends PureComponent {\n\n\n    state = {\n\n        m1: 1.0,\n        m2: 2.0,\n        a: 1.0,\n        C: 1.0,\n    };\n    handleInputChange = event => {\n        //this.props.textChange(event);\n        //console.log(event);\n\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : (parseFloat(target.value) || 0);\n        const name = target.name;\n\n\n        this.setState({\n            [name]: value\n        });\n        //console.log(this.params);\n    };\n\n    handleSetupClick = () => {\n\n        let newParams = Object.assign({}, this.state);\n        newParams.m1 *= constants.protonMass;\n        newParams.m2 *= constants.protonMass;\n\n        this.props.newParamsHandler(newParams);\n        //alert(this.params);\n        //console.log(this.state);\n    };\n\n\n    componentDidUpdate() {\n        console.log('ParamsPanel componentDidUpdate()');\n\n    }\n\n\n    render() {\n        return (\n            <div>\n\n                <h1>Params:</h1>\n                <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">m1</InputGroupAddon>\n                    <Input name={\"m1\"} value={this.state.m1}\n                           placeholder=\"Mass of 1st\"\n                           type=\"number\"\n                           min=\"0.0\" max=\"100.0\" step=\"0.1\"\n                           onChange={this.handleInputChange}/>\n                    <InputGroupAddon addonType=\"append\"> * Mp</InputGroupAddon>\n                </InputGroup>\n\n                <br/>\n\n                <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">m2</InputGroupAddon>\n                    <Input name={\"m2\"} value={this.state.m2}\n                           placeholder=\"Mass of 2d\"\n                           type=\"number\"\n                           min=\"0.0\" max=\"100.0\" step=\"0.1\"\n                           onChange={this.handleInputChange}/>\n                    <InputGroupAddon addonType=\"append\"> * Mp</InputGroupAddon>\n                </InputGroup>\n\n                <br/>\n                <br/>\n\n                <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">a</InputGroupAddon>\n                    <Input name={\"a\"} value={this.state.a}\n                           placeholder=\"\"\n                           type=\"number\"\n                           min=\"0.0\" max=\"100.0\" step=\"0.1\"\n                           onChange={this.handleInputChange}/>\n                    <InputGroupAddon addonType=\"append\">cm^(-8)</InputGroupAddon>\n                </InputGroup>\n\n                <br/>\n                <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">C</InputGroupAddon>\n                    <Input name={\"C\"} value={this.state.C}\n                           placeholder=\"\"\n                           type=\"number\"\n                           min=\"0.0\" max=\"100.0\" step=\"0.1\"\n                           onChange={this.handleInputChange}/>\n                    <InputGroupAddon addonType=\"append\">10^3 erg / cm^2</InputGroupAddon>\n                </InputGroup>\n\n\n                <br/>\n\n\n\n                <br/>\n\n                <InputGroup>\n\n                    <Button color=\"success\" onClick={this.handleSetupClick}>Setup</Button>\n                </InputGroup>\n\n\n            </div>);\n    }\n\n}\n\n\nexport default ParamsPanel;","import React, {Component, PureComponent} from 'react';\n\n\nimport Plot from 'react-plotly.js';\n\nimport * as constants from './logic/constants.js';\n\nimport {calculateAcousticAnimation} from './logic/calculate.js';\n\n\nexport default class AnimationPanel extends PureComponent {\n\n    state = {\n\n        isRunning: !false,\n        currentTime: 0.0,\n        //mode: 'optical',\n        axis: 'x'\n    };\n\n    componentDidUpdate() {\n        //console.log('anim componentDidUpdate()');\n\n\n\n    }\n\n    componentDidMount() {\n        this.setStateInterval = window.setInterval(() => {\n            if (!this.state.isRunning)\n                return;\n            this.setState({\n                currentTime: (this.state.currentTime + constants.deltaT)\n            });\n        }, Math.floor(constants.deltaT * 500));\n\n        console.log('mount anim');\n    }\n\n    componentWillUnmount() {\n        window.clearInterval(this.setStateInterval);\n    }\n\n\n    getScatterData() {\n        // return range(1).map((index) => {\n        //     return {\n        //         x: [Math.sin(this.state.currentTime * Math.PI)],\n        //         y: [Math.cos(this.state.currentTime * Math.PI)],\n        //         marker: {\n        //             size: 14,\n        //             color: ['red', 'blue']\n        //         },\n        //         //ids: this.state.ids,\n        //         mode: 'markers'\n        //     };\n        //\n        //\n        // });\n\n        return [calculateAcousticAnimation(this.state.currentTime, this.state.axis, this.props.animationParams)];\n    }\n\n\n    render() {\n\n        //console.log(this.props.animationParams);\n\n        return (\n\n            <Plot style={{width: '100%'}}\n\n                  data={this.getScatterData()}\n                  layout={{\n                      autosize: true, title: 'Animation',\n                      xaxis: {range: [-20, 280]},\n                      yaxis: {range: [0, 480]}\n                  }}\n            />\n\n        )\n    }\n\n}","import React, {Component} from 'react';\n\n\nimport Plot from 'react-plotly.js';\n\nimport {Container, Row, Col} from 'reactstrap';\n\nimport calculateBranches from './logic/calculate.js';\n\nimport * as constants from './logic/constants.js';\n\nimport {\n    Navbar,\n    NavbarBrand,\n    Jumbotron,\n    NavLink\n} from 'reactstrap';\n\nimport ParamsPanel from './ParamsPanel.js';\nimport AnimationPanel from './AnimationPanel.js';\n\n\nfunction shuffleInPlace(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        let temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\n\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n\nfunction range(size, startAt = 0) {\n    return [...Array(size).keys()].map(i => i + startAt);\n}\n\nclass App extends Component {\n\n    state = {\n        //currentTime: 0.0\n\n        params: {\n            m1: 1.0 * constants.protonMass,\n            m2: 2.0 * constants.protonMass,\n            a: 1.0,\n            C: 1.0 * constants.scaleFactorC,\n            currQ: 157079632.67948964\n        }\n    };\n\n\n    branches = null;\n\n\n    componentDidMount() {\n        this.setStateInterval = window.setInterval(() => {\n            // this.setState({\n            //     currentTime: (this.state.currentTime + deltaT)\n            // });\n        }, Math.floor(constants.deltaT * 900));\n\n        // if(this.branches == null){\n        //     this.branches = calculateBranches(this.state.params);\n        // }\n    }\n\n    componentWillUnmount() {\n        window.clearInterval(this.setStateInterval);\n    }\n\n    getScatterData() {\n        return [this.branches.acoustic, this.branches.optical, this.branches.selected];\n    }\n\n    handleNewParams = newParams => {\n        console.log(newParams);\n\n        newParams.currQ = this.state.params.currQ;\n\n        this.setState({\n            params: newParams\n        });\n    };\n\n    handleBranchClick = data => {\n        //console.log(event);\n        console.log('click', data);\n\n        if (!data.points.length)\n            return;\n\n        let newParams = Object.assign({}, this.state.params);\n\n        newParams.currQ = data.points[0].x;\n\n\n        this.setState({\n            params: newParams\n        });\n    };\n\n    render() {\n\n        // console.log('render');\n        // console.log(this.state.scatterData);\n\n\n        this.branches = calculateBranches(this.state.params);\n\n        let animationParams = Object.assign({}, this.state.params);\n\n        animationParams.opticalWMax = Math.max.apply(null, this.branches.optical.y);\n        animationParams.acousticWMax = Math.max.apply(null, this.branches.acoustic.y);\n\n        return (\n\n            <div>\n                <Navbar color=\"dark\" dark>\n                    <NavbarBrand href={\"#\"}>Phonons</NavbarBrand>\n\n\n                    <NavLink href=\"#\">Github</NavLink>\n                </Navbar>\n\n\n                <Jumbotron fluid={true}>\n                    <Container fluid={true} className={\"h-25\"}>\n\n                        <Row>\n                            <Col xs=\"8\">\n                                <Plot style={{width: '100%'}}\n                                      data={this.getScatterData()}\n                                      onClick={this.handleBranchClick}\n                                      layout={{title: 'Dispersion of phonons', hovermode: 'closest'}}\n                                />\n                            </Col>\n\n                            <Col xs={{size: 4, offset: 0}}>\n\n                                <ParamsPanel newParamsHandler={this.handleNewParams}\n                                             maxQ={this.branches.acoustic.x[this.branches.acoustic.x.length - 1]}/>\n\n                            </Col>\n                        </Row>\n\n\n                        <br/>\n                        <Row>\n                            <Col xs=\"12\">\n                                <AnimationPanel animationParams={animationParams}/>\n                            </Col>\n\n                        </Row>\n\n\n                    </Container>\n                </Jumbotron>\n\n\n                <footer className=\"footer font-small blue\">\n\n\n                    <div className=\"footer-copyright text-center py-3\">© 2018 Copyright:\n                        <a href=\"https://kolsha.ru\"> Kolsha</a>\n                    </div>\n\n\n                </footer>\n            </div>\n\n\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}