{"version":3,"sources":["logic/calculate.js","logic/constants.js","ParamsPanel.js","AnimationPanel.js","App.js","serviceWorker.js","index.js"],"names":["qFactor","Math","pow","getBranchPoint","isOptic","q","params","m1_m2","m1","m2","c2m1m2","C","meanMass","secondPart","sqrt","cos","a","result","protonMass","scaleFactorC","ParamsPanel","state","handleInputChange","event","target","value","type","checked","parseFloat","name","_this","setState","Object","defineProperty","handleSetupClick","newParams","assign","constants","props","newParamsHandler","console","log","react_default","createElement","reactstrap_es","addonType","this","placeholder","min","max","step","onChange","color","onClick","PureComponent","AnimationPanel","isRunning","currentTime","axis","plot","layout","autosize","title","xaxis","range","yaxis","updatemenus","buttons","args","label","method","direction","showactive","x","xanchor","y","yanchor","config","startLoop","stopLoop","_frameId","window","requestAnimationFrame","loop","bind","cancelAnimationFrame","marker","size","mode","amplitude","currWAcoustic","currQ","currWOptic","u1","u2","i","xW","xA","colorW","colorA","acousticWMax","abs","PI","opticalWMax","push","calculateAcousticAnimation","animationParams","_this2","react_plotly_default","style","width","data","getScatterData","onInitialized","figure","onUpdate","onRestyle","startStopAnimation","App","hovermode","branches","handleNewParams","handleBranchClick","points","length","setStateInterval","setInterval","floor","clearInterval","acoustic","optical","selected","brillouin_zone","qMax","qStep","wMax","calculateBranches","apply","dark","href","fluid","className","xs","offset","src_ParamsPanel","AnimationPanel_AnimationPanel","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.86a783e3.chunk.js","sourcesContent":["/* Phonons main calculation\n\n\n\n\n\n\n */\n\n\nconst qFactor = Math.pow(10.0, 8);\n\n\nfunction getBranchPoint(isOptic, q, params) {\n\n    const m1_m2 = (params.m1 * params.m2);\n\n\n    const c2m1m2 = 2.0 * params.C / m1_m2;\n\n    const meanMass = (params.m1 + params.m2) / 2.0;\n\n    const secondPart = Math.sqrt(\n        Math.pow(params.m1 - params.m2, 2.0) / 4.0 + m1_m2 * Math.pow(Math.cos(q * params.a), 2.0)\n    );\n\n\n    let result = meanMass;\n    result += (isOptic) ? secondPart : -secondPart;\n\n    result *= c2m1m2;\n\n\n    return Math.sqrt(result);\n\n}\n\n\nexport default function calculateBranches(params) {\n\n    /*\n            m1: 1.0,\n            m2: 2.0,\n            a: 1.0,\n            C: 1.0\n     */\n\n\n    let result = {\n        acoustic: {\n            x: [],\n            y: [],\n            marker: {\n                size: 8,\n                color: 'blue'\n            },\n            name: 'Acoustic',\n\n            mode: 'lines+markers'\n        },\n\n        optical: {\n            x: [],\n            y: [],\n            marker: {\n                size: 8,\n                color: 'red'\n            },\n            name: 'Optical',\n\n\n            mode: 'lines+markers'\n        },\n\n        selected: {\n            x: [],\n            y: [],\n            marker: {\n                size: 10,\n                color: 'black'\n            },\n\n            name: 'Current',\n\n            mode: 'markers'\n        },\n\n        brillouin_zone: {\n            x: [],\n            y: [],\n            marker: {\n                size: 3,\n                color: 'black'\n            },\n\n            name: 'Brillouin zone',\n\n            mode: 'markers',\n\n\n        }\n    };\n\n\n    const qMax = Math.PI / params.a;\n    const qStep = 0.001 / params.a;\n\n    let wMax = 0;\n\n    for (let q = 0.0; q <= qMax; q += qStep) {\n        const acoustic = getBranchPoint(false, q, params);\n        const optical = getBranchPoint(true, q, params);\n\n        result.acoustic.x.push(q * qFactor);\n        result.acoustic.y.push(acoustic);\n\n        result.optical.x.push(q * qFactor);\n        result.optical.y.push(optical);\n        //\n        // if(acoustic > wMax)\n        //     wMax = acoustic;\n\n        if (optical > wMax)\n            wMax = optical;\n\n\n    }\n\n    for (let q = qMax / 2; q <= qMax; q += qMax / 2) {\n        for (let y = 0; y < wMax; y += wMax / 20) {\n            result.brillouin_zone.x.push(q * qFactor);\n            result.brillouin_zone.y.push(y);\n        }\n    }\n\n\n    const acoustic = getBranchPoint(false, params.currQ / qFactor, params);\n    const optical = getBranchPoint(true, params.currQ / qFactor, params);\n\n    result.selected.x.push(params.currQ);\n    result.selected.y.push(acoustic);\n\n    result.selected.x.push(params.currQ);\n    result.selected.y.push(optical);\n\n\n    return result;\n\n}\n\n//params is animationParams\n\n\nexport function calculateAcousticAnimation(currentTime, axis, params) {\n\n\n    let result = {\n\n        x: [],\n        y: [],\n        marker: {\n            size: 28,\n            color: []\n        },\n        //name: 'Acoustic',\n\n        mode: 'markers'\n\n\n    };\n\n    const offset_x = 50;\n\n    const offset_y = 100;\n\n    const amplitude = 3 * Math.sqrt(offset_x);\n\n    //params.currQ = Math.PI / params.a / 2.0 * qFactor;\n\n    const currWAcoustic = getBranchPoint(false, params.currQ / qFactor, params);\n\n    const currWOptic = getBranchPoint(true, params.currQ / qFactor, params);\n\n\n    // console.log('Curq', params.currQ);\n    //\n    // console.log('Curw:', currW);\n    //\n    // console.log((params.currQ - Math.PI / (2.0 * params.a) * qFactor));\n\n    let u1 = 1.0, u2 = 1.0;\n    if (params.m1 > params.m2) {\n        u1 = (-params.m2 / params.m1);\n    }\n    else if (params.m1 < params.m2) {\n        u2 = (-params.m1 / params.m2);\n    }\n\n\n    for (let i = 1; i < 14; i++) {\n        let xW = 0, yW = 0,\n            xA = 0, yA = 0,\n            colorW = 'black', colorA = 'blue';\n\n\n        if (i % 2 === 1) {\n\n            colorW = 'black';\n            colorA = 'blue';\n\n            xA = (u1 * amplitude * Math.cos(2.0 * params.currQ * params.a * i - currWAcoustic * currentTime / params.acousticWMax) + offset_x * (i - 1));\n\n            if (Math.abs(params.currQ - Math.PI / (2.0 * params.a) * qFactor) < 0.2) {\n                xW = offset_x * (i - 1);\n            } else {\n                xW = (u1 * amplitude * Math.cos(2.0 * params.currQ * params.a * i - currWOptic * currentTime / params.opticalWMax) + offset_x * (i - 1));\n            }\n\n\n        } else {\n            colorW = 'yellow';\n            colorA = 'red';\n\n            xW = (u2 * amplitude * Math.cos(2.0 * params.currQ * params.a * i - currWOptic * currentTime / params.opticalWMax) + offset_x * (i - 1));\n\n\n            if (Math.abs(params.currQ - Math.PI / (2.0 * params.a) * qFactor) < 0.2) {\n                xA = offset_x * (i - 1);\n            } else {\n                xA = (u2 * amplitude * Math.cos(2.0 * params.currQ * params.a * i - currWAcoustic * currentTime / params.acousticWMax) + offset_x * (i - 1));\n            }\n\n\n        }\n\n        yW = offset_y;\n\n        yA = 3 * offset_y;\n\n        // [xW,yW] = [yW,xW];\n        //\n        // [xA,yA] = [yA,xA];\n\n\n        result.marker.color.push(colorW);\n        result.x.push(xW);\n        result.y.push(yW);\n\n        result.marker.color.push(colorA);\n        result.x.push(xA);\n        result.y.push(yA);\n\n\n        // if (i % 2 === 1) {\n        //     result.marker.color.push('black');\n        //\n        //     if (Math.abs(params.currQ - Math.PI / (2.0 * params.a)) >= 0.01) {\n        //         let x = 0, y = 0;\n        //         if (axis === 'x') {\n        //\n        //             x = (13.0 * Math.cos(2.0 * params.currQ * params.a * i - currW / params.acousticWMax * currentTime) + getWidth() / 10 * (i - 1));\n        //             y = offset;\n        //\n        //\n        //         } else {\n        //             x = 15 + getWidth() / 10 * (i - 1);\n        //             y = 13.0 * Math.cos(2.0 * params.currQ * params.a * i - currW / params.acousticWMax * currentTime) + offset;\n        //\n        //         }\n        //\n        //         result.x.push(x);\n        //         result.y.push(y);\n        //\n        //     }\n        //     else if (params.m1 !== params.m2) {\n        //         if (axis === 'x') {\n        //\n        //\n        //             result.x.push(getWidth() / 10 * (i - 1));\n        //             result.y.push(offset);\n        //\n        //         } else {\n        //\n        //\n        //             result.x.push(20 + getWidth() / 10 * (i - 1));\n        //             result.y.push(offset);\n        //         }\n        //\n        //     }\n        //     else if (axis === 'x') {\n        //\n        //\n        //         result.x.push((13.0 * Math.cos(2.0 * params.currQ * params.a * i - currW / params.acousticWMax * currentTime) + getWidth() / 10 * (i - 1)));\n        //         result.y.push(offset);\n        //\n        //\n        //     } else {\n        //\n        //         result.x.push(15 + getWidth() / 10 * (i - 1));\n        //         result.y.push((13.0 * Math.cos(2.0 * params.currQ * params.a * i - currW / params.acousticWMax * currentTime) + offset));\n        //     }\n        //\n        // }\n        // else {\n        //\n        //     result.marker.color.push('yellow');\n        //\n        //     let x = 0, y = 0;\n        //\n        //     if (axis === 'x') {\n        //         x = (13.0 * Math.cos(2.0 * params.currQ * params.a * i - currW / params.acousticWMax * currentTime) + getWidth() / 10 * (i - 1));\n        //         y = offset;\n        //         // g.fillOval((int), 40, 20, 20);\n        //     } else {\n        //         x = 15 + getWidth() / 10 * (i - 1);\n        //         y = (13.0 * Math.cos(2.0 * params.currQ * params.a * i - currW / params.acousticWMax * currentTime) + offset);\n        //\n        //     }\n        //\n        //     result.x.push(x);\n        //     result.y.push(y);\n        // }\n    }\n\n\n    return result;\n\n\n}\n\n// const res = calculateBranches({\n//     m1: 1.0,\n//     m2: 2.0,\n//     a: 1.0,\n//     C: 1.0\n// });\n//\n// console.log(res);","export const protonMass = 1.672621777E-24;\n\nexport const scaleFactorC = 1000.0;\n\nexport const deltaT = 0.1;","import React, {PureComponent} from 'react';\n\n\nimport {InputGroup, InputGroupAddon, Input, Button} from 'reactstrap';\n\n\nimport * as constants from './logic/constants.js';\n\nclass ParamsPanel extends PureComponent {\n\n\n    state = {\n\n        m1: 1.0,\n        m2: 2.0,\n        a: 1.0,\n        C: 1.0,\n    };\n    handleInputChange = event => {\n        //this.props.textChange(event);\n        //console.log(event);\n\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : (parseFloat(target.value) || 0);\n        const name = target.name;\n\n\n        this.setState({\n            [name]: value\n        });\n        //console.log(this.params);\n    };\n\n    handleSetupClick = () => {\n\n        let newParams = Object.assign({}, this.state);\n        newParams.m1 *= constants.protonMass;\n        newParams.m2 *= constants.protonMass;\n\n        this.props.newParamsHandler(newParams);\n        //alert(this.params);\n        //console.log(this.state);\n    };\n\n\n    componentDidUpdate() {\n        console.log('ParamsPanel componentDidUpdate()');\n\n    }\n\n\n    render() {\n        return (\n            <div>\n\n                <h1>Params:</h1>\n                <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">m1</InputGroupAddon>\n                    <Input name={\"m1\"} value={this.state.m1}\n                           placeholder=\"Mass of 1st\"\n                           type=\"number\"\n                           min=\"0.0\" max=\"100.0\" step=\"0.1\"\n                           onChange={this.handleInputChange}/>\n                    <InputGroupAddon addonType=\"append\"> * Mp</InputGroupAddon>\n                </InputGroup>\n\n                <br/>\n\n                <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">m2</InputGroupAddon>\n                    <Input name={\"m2\"} value={this.state.m2}\n                           placeholder=\"Mass of 2d\"\n                           type=\"number\"\n                           min=\"0.0\" max=\"100.0\" step=\"0.1\"\n                           onChange={this.handleInputChange}/>\n                    <InputGroupAddon addonType=\"append\"> * Mp</InputGroupAddon>\n                </InputGroup>\n\n                <br/>\n                <br/>\n\n                <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">a</InputGroupAddon>\n                    <Input name={\"a\"} value={this.state.a}\n                           placeholder=\"\"\n                           type=\"number\"\n                           min=\"0.0\" max=\"100.0\" step=\"0.1\"\n                           onChange={this.handleInputChange}/>\n                    <InputGroupAddon addonType=\"append\">cm^(-8)</InputGroupAddon>\n                </InputGroup>\n\n                <br/>\n                <InputGroup>\n                    <InputGroupAddon addonType=\"prepend\">C</InputGroupAddon>\n                    <Input name={\"C\"} value={this.state.C}\n                           placeholder=\"\"\n                           type=\"number\"\n                           min=\"0.0\" max=\"100.0\" step=\"0.1\"\n                           onChange={this.handleInputChange}/>\n                    <InputGroupAddon addonType=\"append\">10^3 erg / cm^2</InputGroupAddon>\n                </InputGroup>\n\n\n                <br/>\n\n\n                <br/>\n\n                <InputGroup>\n\n                    <Button color=\"success\" onClick={this.handleSetupClick}>Setup</Button>\n                </InputGroup>\n\n\n            </div>);\n    }\n\n}\n\n\nexport default ParamsPanel;","import React, {PureComponent} from 'react';\n\n\nimport Plot from 'react-plotly.js';\n\nimport * as constants from './logic/constants.js';\n\nimport {calculateAcousticAnimation} from './logic/calculate.js';\n\n\nexport default class AnimationPanel extends PureComponent {\n\n    state = {\n\n        isRunning: !false,\n        currentTime: 0.0,\n        //mode: 'optical',\n        axis: 'x',\n    };\n\n    startStopAnimation() {\n        this.setState({\n            isRunning: !(this.state.isRunning)\n        });\n    }\n\n    plot = {\n        layout: {\n            autosize: true, title: 'Animation',\n            xaxis: {range: [-20, 280]},\n            yaxis: {range: [0, 480]},\n\n            updatemenus: [\n                {\n                    buttons: [\n                        {\n                            args: ['start/stop'],\n                            label: (this.state.isRunning) ? 'Stop' : 'Start',\n                            method: 'restyle'\n                        }\n                    ],\n                    direction: 'left',\n                    //pad: {'r': 10, 't': 10},\n                    showactive: true,\n                    type: 'buttons',\n                    x: 0.1,\n                    xanchor: 'left',\n                    y: 1.1,\n                    yanchor: 'top'\n                }\n            ]\n        },\n        config: {}\n    };\n\n    componentDidUpdate() {\n        //console.log('anim componentDidUpdate()');\n\n\n    }\n\n    componentDidMount() {\n        // this.setStateInterval = window.setInterval(() => {\n        //     if (!this.state.isRunning)\n        //         return;\n        //     this.setState({\n        //         currentTime: (this.state.currentTime + constants.deltaT)\n        //     });\n        // }, Math.floor(constants.deltaT * 500));\n        //\n        // console.log('mount anim');\n        this.startLoop();\n    }\n\n    componentWillUnmount() {\n        // window.clearInterval(this.setStateInterval);\n        this.stopLoop();\n    }\n\n    startLoop() {\n        if (!this._frameId) {\n            this._frameId = window.requestAnimationFrame(this.loop.bind(this));\n        }\n    }\n\n    loop() {\n        this._frameId = window.requestAnimationFrame(this.loop.bind(this));\n\n\n        if (!this.state.isRunning)\n            return;\n        this.setState({\n            currentTime: (this.state.currentTime + constants.deltaT)\n        });\n\n\n    }\n\n    stopLoop() {\n        window.cancelAnimationFrame(this._frameId);\n        // Note: no need to worry if the loop has already been cancelled\n        // cancelAnimationFrame() won't throw an error\n    }\n\n\n    getScatterData() {\n        // return range(1).map((index) => {\n        //     return {\n        //         x: [Math.sin(this.state.currentTime * Math.PI)],\n        //         y: [Math.cos(this.state.currentTime * Math.PI)],\n        //         marker: {\n        //             size: 14,\n        //             color: ['red', 'blue']\n        //         },\n        //         //ids: this.state.ids,\n        //         mode: 'markers'\n        //     };\n        //\n        //\n        // });\n\n        return [calculateAcousticAnimation(this.state.currentTime, this.state.axis, this.props.animationParams)];\n    }\n\n\n    render() {\n\n        this.plot.layout.updatemenus[0].buttons[0].label = (this.state.isRunning) ? 'Stop' : 'Start';\n\n        return (\n\n            <Plot style={{width: '100%'}}\n\n                  data={this.getScatterData()}\n                  layout={this.plot.layout}\n\n                  config={this.plot.config}\n\n                  onInitialized={(figure) => {\n                      this.plot.layout = figure.layout;\n                      this.plot.config = figure.config\n                  }}\n                  onUpdate={(figure) => {\n                      this.plot.layout = figure.layout;\n                      this.plot.config = figure.config\n                  }}\n\n                  onRestyle={this.startStopAnimation.bind(this)}\n\n            />\n\n        )\n    }\n\n}","import React, {Component} from 'react';\n\n\nimport Plot from 'react-plotly.js';\n\nimport {Container, Row, Col} from 'reactstrap';\n\nimport calculateBranches from './logic/calculate.js';\n\nimport * as constants from './logic/constants.js';\n\nimport {\n    Navbar,\n    NavbarBrand,\n    Jumbotron,\n    NavLink\n} from 'reactstrap';\n\nimport ParamsPanel from './ParamsPanel.js';\nimport AnimationPanel from './AnimationPanel.js';\n\n\nclass App extends Component {\n\n    state = {\n        //currentTime: 0.0\n\n        params: {\n            m1: 1.0 * constants.protonMass,\n            m2: 2.0 * constants.protonMass,\n            a: 1.0,\n            C: 1.0 * constants.scaleFactorC,\n            currQ: 157079632.67948964\n        }\n    };\n\n\n    plot = {\n        layout: {\n            title: 'Dispersion of phonons',\n            hovermode: 'closest'\n        },\n        config: {}\n    };\n\n\n    branches = null;\n\n\n    componentDidMount() {\n        this.setStateInterval = window.setInterval(() => {\n            // this.setState({\n            //     currentTime: (this.state.currentTime + deltaT)\n            // });\n        }, Math.floor(constants.deltaT * 900));\n\n        // if(this.branches == null){\n        //     this.branches = calculateBranches(this.state.params);\n        // }\n    }\n\n    componentWillUnmount() {\n        window.clearInterval(this.setStateInterval);\n    }\n\n    getScatterData() {\n        return [this.branches.acoustic, this.branches.optical, this.branches.selected, this.branches.brillouin_zone];\n    }\n\n    handleNewParams = newParams => {\n        console.log(newParams);\n\n        newParams.currQ = this.state.params.currQ;\n\n        this.setState({\n            params: newParams\n        });\n    };\n\n    handleBranchClick = data => {\n        //console.log(event);\n        console.log('click', data);\n\n        if (!data.points.length)\n            return;\n\n        let newParams = Object.assign({}, this.state.params);\n\n        newParams.currQ = data.points[0].x;\n\n\n        this.setState({\n            params: newParams\n        });\n    };\n\n    render() {\n\n        // console.log('render');\n        // console.log(this.state.scatterData);\n\n\n        this.branches = calculateBranches(this.state.params);\n\n        let animationParams = Object.assign({}, this.state.params);\n\n        animationParams.opticalWMax = Math.max.apply(null, this.branches.optical.y);\n        animationParams.acousticWMax = Math.max.apply(null, this.branches.acoustic.y);\n\n        return (\n\n            <div>\n                <Navbar color=\"dark\" dark>\n                    <NavbarBrand href={\"#\"}>Phonons</NavbarBrand>\n\n\n                    <NavLink href=\"#\">Github</NavLink>\n                </Navbar>\n\n\n                <Jumbotron fluid={true}>\n                    <Container fluid={true} className={\"h-25\"}>\n\n                        <Row>\n                            <Col xs=\"8\">\n                                <Plot style={{width: '100%'}}\n                                      data={this.getScatterData()}\n                                      onClick={this.handleBranchClick}\n\n                                      layout={this.plot.layout}\n\n                                      config={this.plot.config}\n\n                                      onInitialized={(figure) => {\n                                          this.plot.layout = figure.layout;\n                                          this.plot.config = figure.config\n                                      }}\n                                      onUpdate={(figure) => {\n                                          this.plot.layout = figure.layout;\n                                          this.plot.config = figure.config\n                                      }}\n                                />\n                            </Col>\n\n                            <Col xs={{size: 4, offset: 0}}>\n\n                                <ParamsPanel newParamsHandler={this.handleNewParams}/>\n\n                            </Col>\n                        </Row>\n\n\n                        <br/>\n                        <Row>\n                            <Col xs=\"12\">\n                                <AnimationPanel animationParams={animationParams}/>\n                            </Col>\n\n                        </Row>\n\n\n                    </Container>\n                </Jumbotron>\n\n\n                <footer className=\"footer font-small blue\">\n\n\n                    <div className=\"footer-copyright text-center py-3\">© 2018 Copyright:\n                        <a href=\"https://kolsha.ru\"> Kolsha</a>\n                    </div>\n\n\n                </footer>\n            </div>\n\n\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}